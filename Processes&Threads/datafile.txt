Process is a program in execution. To understand the importance of this definition, letâ€™s imagine that we have written a program called my_prog.c in C. On execution, this program may read in some data and output some data. Note that when a program is written and a file is prepared, it is still a script. It has no dynamics of its own i.e, it cannot cause any input processing or output to happen. Once we compile, and still later when we run this program, the intended operations take place. In other words, a program is a text script with no dynamic behavior. When a program is in execution, the script is acted upon. It can result in engaging a processor for some processing and it can also engage in I/O operations. It is for this reason a process is differentiated from program. While the program is a text script, a program in execution is a process. In other words, To begin with let us define what is a â€œprocessâ€ and in which way a process differs from a program. A process is an executable entity â€“ itâ€™s a program in execution. When we compile a C language program we get an a.out file which is an executable file. When we seek to run this file â€“ we see the program in execution. Every process has its instruction sequence. Clearly, therefore, at any point in time there is a current instruction in execution.